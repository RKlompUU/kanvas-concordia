attributes:
  name: string
  description: string
  image.png: content_uri
  thumbnail.png: content_uri
  create_ready: boolean
  price: number
  editions_size: number
  categories: number[]
  launch_at: date
  proposed: boolean
  proposal_accept: votes
  proposal_reject: votes
  prototype_accept: votes
  prototype_reject: votes

states:
  creation:
    state_transitions:
    - next_state: setup_nft
      when: |
        nft.name.length > 0 &&
        nft.description.length > 0 &&
        nft['image.png'].length > 0 &&
        nft['thumbnail.png'].length > 0
    mutables:
    - attributes: [name, image.png, thumbnail.png, description]
      by_roles: [creator]

  setup_nft:
    state_transitions:
    - next_state: proposed
      when: |
        nft.proposed &&
        nft.editions_size > 0 &&
        nft.price > 0 &&
        nft.price < 1000000 &&
        nft.categories.length > 0
    mutables:
    - attributes: [price, editions_size, proposed, categories, launch_at]
      by_roles: [editor, creator, admin]

  proposed:
    state_transitions:
    - next_state: setup_nft
      when: |
        nft.proposal_reject.length > 0
      do: |
        {
          // Storing rejected state for future reference inside 'proposal_reject_x',
          // where x equals the reject count of this nft

          let idx = 0;
          while (nft.hasOwnProperty('proposal_reject_' + idx)) {
            idx++;
          }
          let reject_name = 'proposal_reject_' + idx;

          nft[reject_name] = {};
          for (let key of Object.keys(nft)) {
            if (!key.startsWith('proposal_reject_')) {
              nft[reject_name][key] = structuredClone(nft[key]);
            }
          }

          nft.proposal_accept = [];
          nft.proposal_reject = [];
          nft.proposed = false;
        }
    - next_state: prototype
      when: |
        nft.proposal_accept.length == 1
    mutables:
    - attributes: [proposal_accept, proposal_reject]
      by_roles: [moderator]

  prototype:
    state_transitions:
    - next_state: finish
      when: 'nft.prototype_accept.length > 0'
    - next_state: setup_nft
      when: 'nft.prototype_reject.length > 0'
      do: |
        {
          // TODO: save state as it was under 'prototype_reject_..'

          nft.proposed = false;
          nft.proposal_accept = [];
          nft.proposal_reject = [];

          nft.prototype_accept = [];
          nft.prototype_reject = [];
        }
    mutables:
    - attributes: [prototype_accept, prototype_reject]
      by_roles: [moderator]
