#!/usr/bin/env bash

start_from=${1:-0}

n=0
function step {
    n=$(( n + 1 ))
    [ $start_from -gt $n ] && return

    if [ $n -gt 1 ]; then
        echo
        echo '-----'
    fi

    echo $n: "$@"
    read -s -n 1
}

echo "Notes:
- config files may be referenced with only the base filename, the step's prefix makes clear what absolute filepath is referenced (for example, if '.env' is mentioned in a 'store-api:' prefixed step, this is referring to kanvas/store-api-server/.env)
*************************************
"

step kanvas: make sure we\'re on the latest "main" branch commit, execute: '`git checkout main; git pull`'
step in mintery repo: execute ./script/setup
step store-api: set MINTER_TZ_ADDRESS in .env to mintery/.env\'s ORIGINATOR_ADDRESS
step store-api: set ADMIN_PUBLIC_KEY in .env to mintery/.env\'s ORIGINATOR_PUB_KEY
step Stripe: create a new test environment in '(in their website)'
step store-api: set STRIPE_WEBHOOK_SECRET in .env accordingly '(taking the webhook secret of the newly created stripe environment)'
step "$(cat <<EOF
AWS S3 (https://s3.console.aws.amazon.com/s3/buckets?region=us-east-1):

create 2 new buckets called something like:
- 'kanvas-...-store'
- and "kanvas-...-admin'
(replacing '...' with some name relevant to this setup).

NOTE: must set following options upon creation of each bucket:
- ACLs enabled  (in "Object Ownership" section)
- unset all in "Block Public Access settings for this bucket"
EOF
)"
step store-api: set AWS_S3_BUCKET in .env to the store bucket created before
step admin-api: set AWS_S3_BUCKET in .env to the admin bucket created before
step admin-api: set ADMIN_PRIVATE_KEY in .env to mintery/.env\'s ORIGINATOR_PRIV_KEY
step admin-front: correct the URLs in .env
step store-front: correct the API BASE URL in .env
step peppermint: set '"privateKey"' in config.json to mintery/.env\'s ORIGINATOR_PRIV_KEY
step peppermint: set '"nftContract"' in config.json to mintery/.env\'s CONTRACT_ADDRESS
step peppermint: ensure '"rpcUrl"' in config.json is set correctly '(node for correct network, ie same network that mintery is set-up for)'
step que_pasa: ensure the same correct URL is in kanvas/docker-compose.yml NODE_URL, and ensure BCD_NETWORK is set to the correct network '(NOTE: THEY OCCUR TWICE EACH, once for the admin-quepasa and once for the store-quepasa)'
step que_pasa: set address in kanvas/config/kanvas.yaml to mintery/.env\'s CONTRACT_ADDRESS
step in kanvas: '`docker-compose down; docker-compose build`'
step in kanvas: '`./deploy-scripts/install/setup-admin-front.bash`'
step in kanvas: '`./deploy-scripts/install/setup-store-front.bash`'
step in kanvas '(under screen window "backend")': '`./run-backend.bash`'
step in kanvas '(under screen window "store-front")': '`./deploy-scripts/run/store-front.bash`'
step in kanvas '(under screen window "admin-front")': '`./deploy-scripts/run/admin-front.bash`'
step nginx: correct URLs in the nginx.conf, and remove all sections/lines managed by certbot
step nginx: execute '`certbot --nginx`', generate certificates for all URLs '(simply hit enter)'

echo "DONE"
